%\VignetteIndexEntry{getting started}
%\VignetteEngine{knitr::knitr}
%\VignetteEncoding{UTF-8}
\documentclass[12pt]{article}
\input{nlipreamble}

%% code listing
\usepackage{listings}
\usepackage{color}
\lstset{
    showstringspaces=false,
    basicstyle=\ttfamily,
    commentstyle=\color[grey]{0.6},
    stringstyle=\color[RGB]{255,150,75}
}
\newcommand{\inlinecode}[2]{{\lstinline[language=#1]$#2$}}
\renewcommand{\code}[1]{\inlinecode{R}{#1}}

<<setup,echo=FALSE>>=
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.height = 4,
  dev = "pdf",
  ##dev = "tikz",
  cache = FALSE,
  ##warning=FALSE,
  comment = "#>"
)
@

\title{\texttt{McMasterPandemic}: getting started}

\author{Ben Bolker and David Earn\\\texttt{earn@math.mcmaster.ca}}

\begin{document}
\linenumbers

\maketitle

\begin{abstract}
  \texttt{McMasterPandemic} is an \Rlogo package that provides tools
  for simulating and forecasting infectious disease outbreaks, using
  compartmental epidemic models.  The primary mechanistic framework is
  a susceptible-exposed-infectious-removed (SEIR) model, with
  additional compartments for individuals in acute and intensive care
  units in hospitals.
\end{abstract}

\tableofcontents

\section{Installation}

<<>>=
if (!("McMasterPandemic" %in% installed.packages())) {
    if (!("devtools" %in% installed.packages())) install.packages("devtools")
    devtools::install_github("bbolker/McMasterPandemic")
}
@

<<loadpkg,cache=FALSE>>=
library(McMasterPandemic)
@

\section{Data requirements}

\paragraph{Parameters}

To run simulations, a few parameter values must be specified.
Set these by editing the example params file, which is converted
to a \code{params_pansim} object by \code{read_params()}.

The term ``in acute care'' means ``in hospital but not in the
intensive care unit (ICU)''.

Note that the \code{print} method for \code{params_pansim} objects
will return a data frame with a column giving the meaning of each
parameter (with argument \code{describe=TRUE}).

<<set params>>=
params1 <- read_params(system.file("params","ICU1.csv",package="McMasterPandemic"))
knitr::kable(print(params1, describe=TRUE))
@

\paragraph{Initial conditions}

The initial state must also be set, but it is sufficient to take
the population size and initially exposed population from the
\code{params_pansim} object (in which case all non-exposed individuals
will be assumed to be susceptible).

<<set initial state>>=
state1 <- make_state(N=params1[["N"]],E=params1[["E0"]],type="ICU1")
@

\paragraph{Start and end dates}

Dates on which the simulation starts and ends must be stated.  If
there are no observations that you are aiming to match, then these
dates are arbitrary and only the length of time matters.

<<dates>>=
sdate <- "10-Feb-2020"
edate <- "1-Jun-2020"

@

\section{Running a simulation}

A simple deterministic simulation is run as follows, and returns a
\code{pansim} object.  The \code{summary} method computes the times
and magnitudes of peak demands on acute care (H) and intenstive care
(ICU), and the basic reproduction number $\R_0$.
\david{It would be good if the summary method spewed the the initial
exponential growth rate $r$, and the initial doubling time as well.}
<<run sim>>=
res1 <- run_sim(params1, state1, start_date=sdate, end_date=edate)
summary(res1)
@

The \code{plot} method for \code{pansim} objects returns a
\code{ggplot} object.
Specifying a log scale in the construction of the plot avoids zeros in
the resulting time series.
<<plot sim>>=
p1 <- plot(res1, keep_states=c("ICU","H","D"), log=TRUE)
print(p1 + scale_y_continuous()) # show linear plot
print(p1) # show logarithmic plot
  ## filter zero values to avoid log-scale warning
  ##+ geom_point(data=dplyr::filter(clean_data,value>0)))
  ##)
@

\subsection{Stochasticity}

The effects of observation error (reporting imperfections) are easy to
explore with the \code{stoch} argument to \code{run_sim}.
\david{This runs, but produces what appears to be garbage.  I'm not
  guessing how to use it properly.}
<<run sim obs noise>>=
params1obs <- c(params1, obs_disp=0.1)
res1obs <- run_sim(params1obs, state1, start_date=sdate, end_date=edate,
                   stoch=c(obs=TRUE, proc=FALSE))
summary(res1obs)
p1obs <- plot(res1obs, keep_states=c("ICU","H","D"), log=TRUE)
print(p1obs + scale_y_continuous()) # show linear plot
print(p1obs) # show logarithmic plot
@

\subsection{Time-dependent transmission rate}

Implementing known changes in transmission rate (e.g., resulting from
social distancing measures) is straighforward via the \code{time_pars}
argument.  The following reduces $\beta_0$ (and hence $\R_0$) to 70\%
of its original value on 20 March 2020, and to 10\% of its original
value on 25 March 2020.

<<run sim time-dependent beta0>>=
time_pars <- data.frame(Date=c("20-Mar-2020","25-Mar-2020"),
                      Symbol=c("beta0","beta0"),
                      Relative_value=c(0.7,0.1))
restimedep <- run_sim(params1,state1,start_date=sdate,end_date=edate,
                  params_timevar=time_pars)
summary(restimedep)
ptimedep <- plot(restimedep, log=TRUE)
print(ptimedep + scale_y_continuous()) # linear scale
print(ptimedep) # logarithmic scale
@

\end{document}
