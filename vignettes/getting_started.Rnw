%\VignetteIndexEntry{getting started}
%\VignetteEngine{knitr::knitr}
%\VignetteEncoding{UTF-8}
\documentclass[12pt]{article}
\input{nlipreamble}

%% code listing
\usepackage{listings}
\usepackage{color}
\lstset{
    showstringspaces=false,
    basicstyle=\ttfamily,
    commentstyle=\color[grey]{0.6},
    stringstyle=\color[RGB]{255,150,75}
}
\newcommand{\inlinecode}[2]{{\lstinline[language=#1]$#2$}}
\renewcommand{\code}[1]{\inlinecode{R}{#1}}

<<setup,echo=FALSE>>=
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.height = 4,
  dev = "pdf",
  ##dev = "tikz",
  cache = FALSE,
  ##warning=FALSE,
  comment = "#>"
)
@

\title{\texttt{McMasterPandemic}: getting started}

\author{Ben Bolker and David Earn\\\texttt{earn@math.mcmaster.ca}}

\begin{document}
\linenumbers

\maketitle

\begin{abstract}
  \texttt{McMasterPandemic} is an R package that provides tools
  for simulating and forecasting infectious disease outbreaks, using
  compartmental epidemic models.  The primary mechanistic framework is
  a susceptible-exposed-infectious-removed (SEIR) model, with
  additional compartments for individuals in acute and intensive care
  units in hospitals.
\end{abstract}

\tableofcontents

\section{Installation}

Use \code{remotes::install_github("bbolker/McMasterPandemic")} to install the latest version of the package.

<<loadpkg,message=FALSE>>=
library(McMasterPandemic)
@

In this vignette we'll also use some other packages:

<<loadpkgs,message=FALSE>>=
library(ggplot2); theme_set(theme_bw())
library(cowplot)
@

\section{Data requirements}

\paragraph{Parameters}

To run simulations, a few parameter values must be specified.
Set these by editing the example params file, which is converted
to a \code{params_pansim} object by \code{read_params()}.

The term ``in acute care'' means ``in hospital but not in the
intensive care unit (ICU)''.

If \code{p} is a parameter set
(e.g. the result of \code{read_params}), then
\code{print(p, describe=TRUE)} will return a data frame
with a column giving the meaning of each
parameter.

<<set_params>>=
params1 <- read_params(system.file("params","ICU1.csv",package="McMasterPandemic"))
@

<<params_kable,echo=FALSE>>=
knitr::kable(describe_params(params1))
@

\paragraph{Initial conditions}

The initial state must also be set, but it is sufficient to take
the population size and initially exposed population from the
\code{params_pansim} object (in which case all non-exposed individuals
will be assumed to be susceptible).

<<set_initial_state>>=
state1 <- make_state(N=params1[["N"]],E=params1[["E0"]],type="ICU1")
@

\paragraph{Start and end dates}

Dates on which the simulation starts and ends must be stated.  If
there are no observations that you are aiming to match, then these
dates are arbitrary and only the length of time matters.

<<dates>>=
sdate <- "10-Feb-2020"
edate <- "1-Jun-2020"
@

\section{Running a simulation}

A simple deterministic simulation is run as follows, and returns a
\code{pansim} object.  The \code{summary} method computes the times
and magnitudes of peak demands on acute care (H) and intenstive care
(ICU), and the basic reproduction number $\R_0$.
<<run_sim>>=
res1 <- run_sim(params1, state1, start_date=sdate, end_date=edate)
summary(res1)
@

The \code{plot} method for \code{pansim} objects returns a
\code{ggplot} object.
Specifying a log scale in the construction of the plot avoids zeros in
the resulting time series.
<<plot_sim,fig.width=8>>=
plot_grid(plot(res1, log=TRUE),  ## logarithmic
          plot(res1))  ## linear
@

\subsection{Stochasticity}

The effects of observation error (reporting imperfections) are easy to
explore with the \code{stoch} argument to \code{run_sim}.
The \code{obs_disp} parameter is the dispersion parameter for a negative
binomial.

<<run_sim_obs_noise,fig.width=8>>=
params1obs <- c(params1, obs_disp=200)
res1obs <- run_sim(params1obs, state1, start_date=sdate, end_date=edate,
                   stoch=c(obs=TRUE, proc=FALSE))
summary(res1obs)
plot_grid(plot(res1obs, log=TRUE),
          plot(res1obs))
@

\subsection{Time-dependent transmission rate}

Implementing known changes in transmission rate (e.g., resulting from
social distancing measures) is straighforward via the \code{time_pars}
argument.  The following reduces $\beta_0$ (and hence $\R_0$) to 50\%
of its original value on 10 March 2020, and to 10\% of its original
value on 25 March 2020.

<<run_sim_time-dependent_beta0,fig.width=8>>=
time_pars <- data.frame(Date=c("10-Mar-2020","25-Mar-2020"),
                      Symbol=c("beta0","beta0"),
                      Relative_value=c(0.5,0.1))
restimedep <- run_sim(params1,state1,start_date=sdate,end_date=edate,
                      params_timevar=time_pars,ndt=20)
summary(restimedep)
plot_grid(plot(restimedep, log=TRUE, aggregate=FALSE),
          plot(restimedep, aggregate=FALSE))
@

\section{Calibration}


\end{document}
