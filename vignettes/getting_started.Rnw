%\VignetteIndexEntry{getting started}
%\VignetteEngine{knitr::knitr}
%\VignetteEncoding{UTF-8}
\documentclass[12pt]{article}
\input{nlipreamble}

%% code listing
\usepackage{listings}
\usepackage{color}
\lstset{
    showstringspaces=false,
    basicstyle=\ttfamily,
    commentstyle=\color[grey]{0.6},
    stringstyle=\color[RGB]{255,150,75}
}
\newcommand{\inlinecode}[2]{{\lstinline[language=#1]$#2$}}
\renewcommand{\code}[1]{\inlinecode{R}{#1}}

<<setup,include=FALSE>>=
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.height = 4,
  dev = "pdf",
  ##dev = "tikz",
  cache = FALSE,
  ## error=TRUE,  ## allow run to continue with error (good for debugging1)
  ##warning=FALSE,
  comment = "#>"
)
@

\title{\texttt{McMasterPandemic}: getting started}

\author{Ben Bolker and David Earn\\\texttt{earn@math.mcmaster.ca}}

\begin{document}
\linenumbers

\maketitle

\begin{abstract}
  \texttt{McMasterPandemic} is an R package that provides tools
  for simulating and forecasting infectious disease outbreaks, using
  compartmental epidemic models.  The primary mechanistic framework is
  a susceptible-exposed-infectious-removed (SEIR) model, with
  additional compartments for individuals in acute and intensive care
  units in hospitals.
\end{abstract}

\tableofcontents

\section{Installation}

Use \code{remotes::install_github("bbolker/McMasterPandemic")} to install the latest version of the package.

<<loadpkg, message=FALSE>>=
library(McMasterPandemic)
@

In this vignette we'll also use some other packages:

<<loadpkgs,message=FALSE>>=
library(ggplot2); theme_set(theme_bw())
library(cowplot)
@

\section{Data requirements}

\paragraph{Parameters}

To run simulations, a few parameter values must be specified.
Set these by editing the example params file, which is converted
to a \code{params_pansim} object by \code{read_params()}.
In the example, the time unit is assumed to be days.

The term ``in acute care'' means ``in hospital but not in the
intensive care unit (ICU)''.

If \code{p} is a parameter set (e.g. the result of
\code{read_params}), then \code{print(p, describe=TRUE)} will return a
data frame with a column giving the meaning of each parameter.

<<set_params>>=
params1 <- read_params("ICU1.csv")
@

(by default \code{read_params} looks first in the working directory for CSV files, then in the \code{params} directory installed with the package (\code{system.file("params", package="McMasterPandemic")}).

<<params_kable,echo=FALSE>>=
knitr::kable(describe_params(params1))
@

\bigskip

The \code{summary} method for \code{params_pansim} objects returns the
initial exponential growth rate ($r_0$), the doubling time
($\log{2}/r_0$), the mean generation interval ($\overline{G}$), and
the basic reproduction number

%%
\begin{equation*}
\R_0 = \beta_0 \left\{
\alpha \frac{C_{\rm a}}{\gamma_{\rm a}}
+
(1-\alpha)\left[ \frac{C_{\rm p}}{\gamma_{\rm p}}
  + \mu(1-\texttt{iso}_{\rm m})\frac{C_{\rm m}}{\gamma_{\rm m}}
  + (1-\mu)(1-\texttt{iso}_{\rm s})\frac{C_{\rm s}}{\gamma_{\rm s}} \right]
  \right\} \,.
\end{equation*}

<<params_summary>>=
knitr::kable(round(t(summary(params1)),2))
@

\bigskip\noindent
The components of $\R_0$ (the reproduction number associated with each infectious compartment) can also be extracted.

<<R0_components>>=
knitr::kable(round(t(get_R0(params1, components=TRUE)),2))
@

\paragraph{Initial conditions}

The initial state must also be set, but it is sufficient to specify
the parameter set (a \code{params_pansim} object), in which case
the population size and initially exposed population will be taken from the parameters (in this case all non-exposed individuals
are assumed to be susceptible).

<<set_initial_state>>=
state1 <- make_state(params=params1)
@

\paragraph{Start and end dates}

Dates on which the simulation starts and ends must be stated.  If
there are no observations that you are aiming to match, then these
dates are arbitrary and only the length of time matters.

<<dates>>=
sdate <- "2020-Feb-10"
edate <- "2020-Jun-1"
@

\section{Running a simulation}

A simple deterministic simulation is run as follows, and returns a
\code{pansim} object.  The \code{summary} method computes the times
and magnitudes of peak demands on acute care (H) and intenstive care
(ICU), and the basic reproduction number $\R_0$.

<<run_sim>>=
res1 <- run_sim(params=params1, state=state1, start_date=sdate, end_date=edate)
summary(res1)
@

The \code{plot} method for \code{pansim} objects returns a
\code{ggplot} object, optionally on a log scale.

<<plot_sim,fig.width=8>>=
plot_grid(plot(res1, log=TRUE),  ## logarithmic
          plot(res1))  ## linear
@

\subsection{Stochasticity}

The effects of observation error are easy to
explore with the \code{stoch} argument to \code{run_sim}.
The \code{obs_disp} parameter is the dispersion parameter for a negative
binomial.

<<run_sim_obs_noise,fig.width=8>>=
set.seed(101)
params1obs <- update(params1, obs_disp=200)
res1obs <- run_sim(params1obs, state1, start_date=sdate, end_date=edate,
                   stoch=c(obs=TRUE, proc=FALSE))
res1obs <- dplyr::select(res1obs,-D)
summary(res1obs)
plot_grid(plot(res1obs, log=TRUE),
          plot(res1obs))
@
(We leave out deaths for now; we simulate observation error on the cumulative death process and then difference it to come up with daily deaths, which doesn't really make sense.)

To simulate with process error, use \code{stoch_obs(..., proc=TRUE)}. By default, this simulates only demographic stochasticity, which has little effect in a large epidemic.

<<proc1>>=
params1proc <- update(params1,E0=200)
res1proc <- run_sim(params1proc, start_date=sdate, end_date=edate,
                    stoch=c(obs=FALSE, proc=TRUE))
@

Adding a \code{proc_disp} value to the set of arguments simulates with additional process noise:

<<proc2>>=
params1proc2 <- update(params1,E0=200,proc_disp=0.5)
res1proc2 <- run_sim(params1proc2, start_date=sdate, end_date=edate,
                    stoch=c(obs=FALSE, proc=TRUE))
plot_grid(plot(res1proc2, log=TRUE), plot(res1proc2))
@

\paragraph{Technical note.}

Demographic noise is included by calculating probabilities from the
rates and then drawing a multinomial sample to determine how many
individuals move from one compartment to each of the others.  With
pure demographic noise, the CV is very small with only 1000
individuals moving among compartments.  Process dispersion
(\code{proc_disp}; ``overdispersed demographic stochasticity'') is
implemented using \code{pomp::reulermultinom}, which adds gamma white
noise to the event rates.  \david{See He \emph{et al.} (2010)
  plug-and-play paper for some discussion of this (p.\,274 and
  Appendix~A).}  the intensity of the gamma white noise process
(\code{proc_disp}) has units (\emph{cf.}~$\sigma_{\rm SE}$ in He
\emph{et al.}); it would be easier to think about the CV rather than
sd.

\david{Notes scribbed from discussion with BB: To get CIs on a
  forecast, we could hack by adjusting \code{proc_disp} until getting
  CIs that are plausibly wide; estimating this number is a can of
  worms.  A slighty more principaled way to decide on that number: fit
  params, then run sims with different combinations of obs and proc
  noise that yield noise like in the data: then infer how observed
  noise is divided btw proc and measurement error.}

\subsection{Time-dependent transmission rate}

Implementing known changes in transmission rate (e.g., resulting from
social distancing measures) is straighforward via the \code{time_pars}
argument.  The following reduces $\beta_0$ (and hence $\R_0$) to 50\%
of its original value on 10 March 2020, and to 10\% of its original
value on 25 March 2020.

<<run_sim_time-dependent_beta0,fig.width=8>>=
time_pars <- data.frame(Date=c("2020-Mar-10","2020-Mar-25"),
                      Symbol=c("beta0","beta0"),
                      Relative_value=c(0.5,0.1))
restimedep <- run_sim(params1,state1,start_date=sdate,end_date=edate,
                      params_timevar=time_pars,ndt=20)
summary(restimedep)
plot_grid(plot(restimedep, log=TRUE, condense=FALSE),
          plot(restimedep, condense=FALSE))
@

\section{Calibration}

In a typical epidemic forecasting application, we have imperfect
information about the parameters and a time series of reported events
(e.g., cases, hospitalizations, deaths, \emph{etc.}).  Our goal is to
predict the future course of the outbreak, and to determine how it
will differ under various intervention scenarios.

The natural approach is to find a set of parameters that lies within
the estimated constraints and best fits the observed part of the
epidemic.


\end{document}
