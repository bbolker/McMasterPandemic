% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calibrate.R
\name{mle_fun}
\alias{mle_fun}
\title{negative log-likelihood function}
\usage{
mle_fun(
  p,
  data,
  debug = FALSE,
  debug_plot = FALSE,
  debug_hist = FALSE,
  opt_pars,
  base_params,
  start_date = min(data$date),
  end_date = max(data$date),
  time_args = NULL,
  sim_args = NULL,
  sim_fun = run_sim_break,
  checkpoint = FALSE,
  aggregate_args = NULL,
  priors = NULL,
  na_penalty = 1e+06,
  ...
)
}
\arguments{
\item{p}{parameter vector (in unlisted form)}

\item{data}{a data set to compare to, containing date/var/value (current version assumes that only a single state var is included)}

\item{debug}{print debugging messages?}

\item{debug_plot}{plot debugging curves? (doesn't work with parallel DEoptim)}

\item{debug_hist}{keep information on parameter history?}

\item{opt_pars}{starting parameters (and structure).  Parameters that are part of the \code{params_pansim} parameter vector can be specified within the \code{params} element (with prefixes if they are transformed); other parameters can include distributional parameters or time-varying parameters}

\item{base_params}{baseline parameters (an object (vector?) of type \code{params_pansim} containing all of the parameters needed for a simulation; some may be overwritten during the calibration process)}

\item{start_date}{starting date for sims (far enough back to allow states to sort themselves out)}

\item{end_date}{ending date}

\item{time_args}{arguments passed to \code{sim_fun}}

\item{sim_args}{additional arguments to pass to \code{\link{run_sim}}}

\item{sim_fun}{function for simulating a single run (e.g. \code{\link{run_sim_break}}, \code{\link{run_sim_mobility}})}

\item{checkpoint}{save file containing call information?}

\item{aggregate_args}{arguments passed to \code{\link{aggregate.pansim}}}

\item{priors}{a list of tilde-delimited expressions giving prior distributions expressed in terms of the elements of \code{opt_pars}, e.g. \code{list(~dlnorm(rel_beta0[1],meanlog=-1,sd=0.5))}}

\item{na_penalty}{value to add to NLL for NA values in log-likelihood}

\item{...}{unused (but useful in case junk needs to be discarded)}
}
\description{
negative log-likelihood function
}
\examples{
library(dplyr)
p <- read_params("ICU1.csv")
op <- get_opt_pars(p)
dd <- ont_all \%>\% trans_state_vars() \%>\% filter(var \%in\% c("H","death"))
mle_fun(p=unlist(op), dd, opt_pars=op, base_params=p)
op <- op["params"] ## exclude log_nb_disp
try(mle_fun(p=unlist(op), dd, opt_pars=op, base_params=p))
p2 <- update(p, obs_disp=2)
mle_fun(p=unlist(op), dd, opt_pars=op, base_params=p2)
p3 <- update(p, obs_disp_H=2, obs_disp_death=2)
mle_fun(p=unlist(op), dd, opt_pars=op, base_params=p3)
}
